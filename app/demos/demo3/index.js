import '../../base.css';
import './style.styl';

import { Color, Vector3 } from 'three';
import Engine from 'utils/engine';
import AnimatedText3D from 'objects/AnimatedText3D';
import LineGenerator from 'objects/LineGenerator';

import getRandomFloat from 'utils/getRandomFloat';
import getRandomItem from 'utils/getRandomItem';

import HandleCameraOrbit from 'decorators/HandleCameraOrbit';
import FullScreenInBackground from 'decorators/FullScreenInBackground';

import app from 'App';


/**
 * * *******************
 * * ENGINE
 * * *******************
 */

@FullScreenInBackground
@HandleCameraOrbit({ x: 8, y: 8 }, 0.15)
class CustomEngine extends Engine {}

const engine = new CustomEngine();


/**
 * * *******************
 * * TITLE
 * * *******************
 */
class CustomAnimatedText3D extends AnimatedText3D {
  constructor(...props) {
    super(...props);
    this.t = 0;
    this.update = this.update.bind(this);
  }

  update() {
    this.t += 0.05;
    this.position.y += (Math.sin(this.t)) * 0.0025;
  }
}
const text = new CustomAnimatedText3D('Energy', { color: '#0f070a', size: app.isMobile ? 0.6 : 0.8 });
text.position.x -= text.basePosition * 0.5;
text.position.y += 0.15;


/**
 * * *******************
 * * LIGNES
 * * *******************
 */
const COLORS = ['#FDFFFC', '#FDFFFC', '#FDFFFC', '#FDFFFC', '#EA526F', '#71b9f2'].map((col) => new Color(col));
const STATIC_PROPS = {
  nbrOfPoints: 4,
  speed: 0.03,
  turbulence: new Vector3(1, 0.8, 1),
  orientation: new Vector3(1, 0, 0),
  transformLineMethod: p => {
    const a = ((0.5 - Math.abs(0.5 - p)) * 3);
    return a;
  }
};

const POSITION_X = app.isMobile ? -1.8 : -3.2;

const LENGTH_MIN = app.isMobile ? 3.25 : 5;
const LENGTH_MAX = app.isMobile ? 3.7 : 7;
class CustomLineGenerator extends LineGenerator {
  start() {
    const currentFreq = this.frequency;
    this.frequency = 1;
    setTimeout(() => {
      this.frequency = currentFreq;
    }, 500);
    super.start();
  }

  addLine() {
    const line = super.addLine({
      width: getRandomFloat(0.1, 0.3),
      length: getRandomFloat(LENGTH_MIN, LENGTH_MAX),
      visibleLength: getRandomFloat(0.05, 0.8),
      position: new Vector3(
        POSITION_X,
        0.3,
        getRandomFloat(-1, 1),
      ),
      color: getRandomItem(COLORS),
    });
    line.rotation.x = getRandomFloat(0, Math.PI * 2);

    if (false) {
      const line = super.addLine({
        width: getRandomFloat(0.05, 0.1),
        length: getRandomFloat(5, 10),
        visibleLength: getRandomFloat(0.05, 0.5),
        speed: 0.05,
        position: new Vector3(
          getRandomFloat(-9, 5),
          getRandomFloat(-5, 5),
          getRandomFloat(-10, 6),
        ),
        color: getRandomItem(COLORS),
      });
      line.rotation.x = getRandomFloat(0, Math.PI * 2);
    }
  }
}
const lineGenerator = new CustomLineGenerator({
  frequency: 0.9,
}, STATIC_PROPS);
lineGenerator.isGeneratorActive = false;

// /*beats*/const musicInterval = [0.32536, 0.32664, 0.33039, 0.33398, 0.33704, 0.33666, 0.3339, 0.334, 0.33252, 0.33233, 0.33106, 0.32891, 0.33032, 0.33182, 0.33351, 0.336, 0.33572, 0.33365, 0.3311, 0.32892, 0.33339, 0.3345, 0.33253, 0.33125, 0.33147, 0.33425, 0.33724, 0.33428, 0.33301, 0.3357, 0.3369, 0.33215, 0.3275, 0.32771, 0.33089, 0.33179, 0.33131, 0.32894, 0.33628, 0.34243, 0.34184, 0.33967, 0.3372, 0.33503, 0.33791, 0.33276, 0.32672, 0.32613, 0.32643, 0.33, 0.33337, 0.33555, 0.33962, 0.34447, 0.34745, 0.35082, 0.35052, 0.34715, 0.34249, 0.3408, 0.3406, 0.3404, 0.33742, 0.33504, 0.33533, 0.33761, 0.33721, 0.33552, 0.33403, 0.33244, 0.33184, 0.33283, 0.33273, 0.33391, 0.33361, 0.33034, 0.33025, 0.33205, 0.33385, 0.33387, 0.33241, 0.33184, 0.33395, 0.33399, 0.33085, 0.3283, 0.32824, 0.32995, 0.33237, 0.33212, 0.33086, 0.3295];
// /*tatums*/ const musicInterval = [0.2169, 0.10845, 0.21776, 0.10888, 0.22026, 0.11013, 0.22265, 0.11133, 0.22469, 0.11235, 0.22444, 0.11222, 0.2226, 0.1113, 0.22267, 0.11133, 0.22168, 0.11084, 0.22155, 0.11078, 0.22071, 0.11035, 0.21927, 0.10964, 0.22021, 0.11011, 0.22121, 0.11061, 0.22234, 0.11117, 0.224, 0.112, 0.22381, 0.11191, 0.22244, 0.11122, 0.22073, 0.11037, 0.21928, 0.10964, 0.22226, 0.11113, 0.223, 0.1115, 0.22168, 0.11084, 0.22083, 0.11042, 0.22098, 0.11049, 0.22283, 0.11142, 0.22483, 0.11241, 0.22286, 0.11143, 0.22201, 0.111, 0.2238, 0.1119, 0.2246, 0.1123, 0.22144, 0.11072, 0.21834, 0.10917, 0.21847, 0.10924, 0.22059, 0.1103, 0.22119, 0.1106, 0.22087, 0.11044, 0.21929, 0.10965, 0.22418, 0.11209, 0.22829, 0.11414, 0.2279, 0.11395, 0.22645, 0.11322, 0.2248, 0.1124, 0.22335, 0.11168, 0.22527, 0.11264, 0.22184, 0.11092, 0.21781, 0.10891, 0.21742, 0.10871, 0.21762, 0.10881, 0.22, 0.11, 0.22225, 0.11112, 0.2237, 0.11185, 0.22641, 0.11321, 0.22965, 0.11482, 0.23163, 0.11582, 0.23388, 0.11694, 0.23368, 0.11684, 0.23143, 0.11572, 0.22833, 0.11416, 0.2272, 0.1136, 0.22707, 0.11353, 0.22693, 0.11347, 0.22495, 0.11247, 0.22336, 0.11168, 0.22355, 0.11178, 0.22507, 0.11254, 0.22481, 0.1124, 0.22368, 0.11184, 0.22269, 0.11134, 0.22163, 0.11081, 0.22123, 0.11061, 0.22189, 0.11094, 0.22182, 0.11091, 0.22261, 0.1113, 0.22241, 0.1112, 0.22023, 0.11011, 0.22016, 0.11008, 0.22136, 0.11068, 0.22257, 0.11128, 0.22258, 0.11129, 0.22161, 0.1108, 0.22123, 0.11061, 0.22264, 0.11132, 0.22266, 0.11133, 0.22057, 0.11028, 0.21887, 0.10943, 0.21883, 0.10941, 0.21997, 0.10998, 0.22158, 0.11079, 0.22141];
/*segments*/ const musicInterval = [0.20463, 0.0717, 0.34045, 0.36939, 0.34, 0.19488, 0.16041, 0.58177, 0.11737, 0.19565, 0.2619, 0.11683, 0.3595, 0.3141, 0.38399, 0.26993, 0.29728, 0.26122, 0.17973, 0.25524, 0.07039, 0.29057, 0.23751, 0.80549, 0.18213, 0.26113, 0.13692, 0.26512, 0.17016, 0.29605, 0.30027, 0.32902, 0.37202, 0.17846, 0.13977, 0.19161, 0.17855, 0.60454, 0.27465, 0.11551, 0.33642, 0.26145, 0.35283, 0.49179, 0.19878, 0.14036, 0.13819, 0.25646, 0.16322, 0.49247, 0.13991, 0.10989, 0.26159, 0.11025, 0.12295, 0.40658, 0.34068, 0.52853, 0.16821, 0.15705, 0.11601, 0.30667, 0.12313, 0.19714, 0.34254, 0.40685, 0.33029, 0.23175, 0.10585, 0.18417, 0.34848, 0.39619, 0.37202, 0.31533, 0.16603, 0.19814, 0.13605, 0.1946, 0.27202, 0.34091, 0.41329, 0.16091, 0.11175, 0.3551, 0.68921, 0.31429, 0.57977, 0.18349, 0.26948, 0.16998, 0.14948, 0.30177, 0.17311, 0.1873, 0.5917, 0.09873, 0.28494, 0.30689, 0.33841, 0.19029, 0.15696, 0.15388, 0.16535, 0.16413, 0.21823, 0.14494, 0.16304, 0.31383, 0.4922, 0.18789, 0.31946, 0.64177, 0.48998, 0.67361, 0.55615, 0.16227, 0.10327, 0.10522, 0.19859, 0.45138, 0.33175, 0.16907, 0.1673, 0.26794, 0.06458, 0.30621, 0.1581, 0.14417, 0.70313, 0.36508, 0.61147, 0.12376, 0.08481, 0.15456, 0.18027, 0.17973, 0.30236, 0.16209, 0.19125, 0.11125, 0.2029, 0.09224, 0.72054, 0.18649, 0.33515, 0.5634, 0.10503, 0.2098, 0.12649, 0.14531, 0.21478, 0.29469, 0.32694, 0.19882, 0.1546, 0.3068, 0.19338, 0.1605, 0.37107, 0.19855, 0.24404, 0.16807, 0.16299, 0.15043, 0.19828, 0.19093, 0.32005, 0.26517, 0.40159, 0.21551, 0.12277, 0.3063, 0.65079, 0.58562, 0.57524, 0.12277, 0.39311, 0.36045, 1.03315, 0.3078, 0.70789, 0.59782, 0.36023, 0.29569, 0.33147, 0.18594, 0.19778, 0.13379, 0.09143, 0.7268, 0.30871, 0.73569, 0.93279, 0.32086, 0.22576, 0.1981, 0.33497, 0.63533, 0.30073, 0.56422, 0.13202, 0.36726, 0.58608, 0.2015, 0.09914, 0.24626, 0.19098, 0.35406, 1.04317, 0.2488, 0.25569, 0.27805, 0.16322, 0.30971, 0.8049, 0.14807, 0.3054, 0.19093, 0.5068, 0.75728, 0.18177, 0.95188, 0.15601, 0.99401, 0.31882, 0.12195, 0.37166, 0.14354, 0.34989, 0.37764, 0.28467, 0.37678, 0.07483, 0.25578, 0.1434, 0.12499, 0.39333, 0.32544, 0.31701, 0.36762, 0.1151, 0.21637, 0.17828, 0.14744, 0.06753, 0.26231, 0.33029, 0.32585, 0.30639, 0.36653, 0.31964, 0.16889, 0.19238, 0.16576, 0.13982, 0.30834, 0.37587, 0.48485, 0.19134, 0.53329, 0.13324, 0.27288, 0.382, 0.33252, 0.32363, 0.35442, 0.3141, 0.3005, 0.82118, 0.16073, 0.38862, 0.29206, 0.37116, 0.34127, 0.34272, 0.23909, 0.09778, 0.26662, 0.38395, 0.2956, 0.382, 0.1161, 0.2219, 0.16195, 0.0985, 0.37424, 0.3581, 0.33819, 0.33465, 0.06975, 0.26281, 0.14313, 0.1259, 0.15864, 0.23234, 0.32893, 0.33873, 0.39311, 0.07764, 0.40671, 0.11501, 0.14621, 0.1917, 0.33351, 0.33841, 0.29633, 0.2258, 0.12853, 0.34073, 0.16023, 0.18948, 0.17016, 0.09102, 0.33116, 0.40653, 0.16317, 0.31769, 0.17492, 0.64458, 0.36063, 0.31832, 0.1859, 0.15016, 0.11719, 0.2258, 0.66132, 0.30372, 0.50444, 0.47519, 0.37791, 0.30127, 0.11111, 0.12077, 0.14458, 0.32649, 0.34268, 0.27347, 0.14222, 0.55909, 0.30041, 0.37914, 0.11546, 0.10458, 0.12236, 0.21406, 0.12254, 0.19016, 0.1224, 0.39628, 0.60943, 0.31288, 0.33655, 0.34825, 0.63841, 0.37687, 0.30186, 0.23465, 0.11365, 0.29977, 0.2181, 0.33673, 0.16898, 0.26975, 0.37302, 0.28454, 0.20413, 0.22522, 0.22694, 0.36621, 0.56195, 0.48249, 0.18145, 0.1483, 0.2961, 0.36159, 0.36603, 0.2946, 0.31397, 0.12059, 0.25628, 0.20821, 0.09329, 0.31351, 0.20957, 0.14005, 0.29578, 0.22113, 0.15016, 0.23029, 0.80317, 0.25873, 0.39152, 0.34771, 0.30739, 0.47673, 0.21388, 0.27252, 0.37188, 0.27211, 0.06617, 0.30748, 0.3141, 0.36975, 0.36617, 0.19111, 0.44218, 0.52585, 0.26789, 0.22181, 0.3429, 0.33587, 0.26712, 0.23524, 0.11937, 0.37147, 0.12045, 0.2215, 0.32585, 0.28961, 0.35937, 0.68594, 0.33628, 0.49859, 0.16277, 0.3439, 0.20726, 0.12866, 0.34789, 0.14, 0.1732, 0.51175, 0.1107, 0.34671, 0.35442, 0.19791, 0.11478, 0.15197, 0.2034, 0.14091, 0.18444, 0.17955, 0.07986, 0.4239, 0.2795, 0.20898, 0.18571, 0.26689, 0.29782, 0.08558, 0.33048, 0.21497, 0.35424, 0.44753, 0.32399, 0.26204, 0.37646, 0.33175, 0.31959, 0.13905, 0.59224, 0.96889, 0.49388, 0.1395, 0.37701, 0.27283, 0.30213, 0.22045, 0.19918, 0.69492, 0.30703, 0.33714, 0.3673, 0.17283, 0.14984, 0.12803, 0.61533, 0.18077, 0.38816, 0.19751, 0.16871, 0.30794, 0.60467, 0.33528, 0.16313, 0.58571, 0.31937, 0.48608, 0.22209, 0.07374, 0.18168, 0.18766, 0.15751, 0.32036, 0.18698, 0.85107, 0.20463, 0.1005, 0.2849, 0.26649, 0.13338, 0.13601, 0.18023, 0.80934, 0.13456, 0.35955, 0.37134, 0.21574, 0.10794, 0.20444, 0.30821, 0.38295, 0.12707, 0.44172, 0.13937, 0.33057, 1.09034, 0.38367, 0.45365, 0.08014, 0.41397, 0.10862, 0.23923, 0.27188, 0.39383, 0.46005, 0.09147, 0.08163, 0.4142, 0.23138, 0.38907, 0.32703, 0.31728, 0.20354, 0.12172, 0.34785, 0.33279, 0.30227, 0.56807, 0.07442, 0.33615, 0.55052, 0.12372, 0.30132, 0.25524, 0.12698, 0.44231, 0.20195, 0.63868, 0.30794, 0.37224, 0.44766, 0.06766, 0.79039, 0.13859, 0.19247, 0.22585, 0.31401, 0.23796, 0.24503, 0.15007, 0.22059, 0.31914, 0.14481, 0.20254, 0.33247, 0.12744, 0.15578, 0.25578, 0.06939, 0.24948, 0.30249, 0.2322, 0.08095, 0.18023, 0.37696, 0.16853, 0.39465, 0.7785, 0.20821, 0.06971, 0.35986, 0.31959, 0.17537, 0.13846, 0.72549, 0.31356, 0.37102, 0.97447, 0.34376, 0.30717, 0.30762, 0.36612, 0.29379, 0.39483, 0.25723, 0.21488, 0.16839, 0.34812, 0.15134, 0.32467, 0.19179, 0.66685, 0.28522, 0.36608, 0.3068, 0.35465, 0.32494, 0.34272, 0.29592, 0.30771, 0.47016, 0.26703, 0.33701, 0.2898, 0.38322, 0.33098, 0.32531, 0.34798, 0.7834, 0.19179, 1.03891, 0.20884, 0.72535, 0.33147, 0.13361, 0.15633, 1.07474, 0.28966, 0.65578, 0.1278, 0.18553, 0.33655, 0.42404, 0.27868, 0.40649, 0.95234, 0.68426, 0.80141, 0.2624, 0.5444, 0.14535, 0.12825, 0.10444, 0.47011, 0.32517, 0.47537, 0.23805, 0.51147, 0.24871, 0.33732, 0.16862, 0.90404, 0.33166, 0.73175, 0.41823, 0.1098, 0.65084, 0.10395, 0.11075, 0.73143, 0.35374, 0.42322, 0.12762, 0.25034, 0.3366, 1.69515, 0.30222, 0.15079, 0.34172, 0.2034, 0.85347, 0.11025, 0.23819, 0.08821, 0.37696, 0.31778, 0.46426, 0.12408, 0.33537, 0.15048, 0.41868, 0.14399, 0.40771, 0.42358, 0.21946, 0.1459];
let indexInteval = 0;
const changeLineBehaviour = () => {
  if(indexInteval < musicInterval.length){
    setTimeout( () => {
      lineGenerator.isGeneratorActive = !lineGenerator.isGeneratorActive;
      lineGenerator.addLine();
      //lineGenerator.addLine();
      //lineGenerator.addLine();
      indexInteval++
      changeLineBehaviour();
      console.log("index: ", indexInteval);
    }, musicInterval[indexInteval - 1] * 1000);
  }
  else{
    lineGenerator.isGeneratorActive = false;
  }  
}
changeLineBehaviour();

engine.add(lineGenerator);

/**
 * * *******************
 * * START
 * * *******************
 */
// Show
engine.start();
const tlShow = new TimelineLite({ delay: 0.2 });
tlShow.to('.overlay', 0.6, { autoAlpha: 0 });
tlShow.fromTo(engine.lookAt, 3, { y: -4 }, { y: 0, ease: Power3.easeOut }, 0);
tlShow.add(lineGenerator.start, '-=2.5');
tlShow.add(() => {
  engine.add(text);
  text.show();
}, '-=1.6');

// Hide
app.onHide((onComplete) => {
  const tlHide = new TimelineLite();
  tlHide.to(engine.lookAt, 2, { y: -6, ease: Power3.easeInOut });
  tlHide.add(text.hide, 0);
  tlHide.add(lineGenerator.stop);
  tlHide.to('.overlay', 0.5, { autoAlpha: 1, onComplete }, '-=1.5');
});
